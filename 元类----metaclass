class Hello (object):
    def hello (self, name='world'):
        print ('Hello, %s.' % name)

# type ()
# 可以查看一个类或者变量的类型，class类型为type
# type() 可以返回对象类型，并创建对象
# 参数: class名称，继承类集合(tuple集合),class方法名称与函数绑定

def fn (self, name='world'):
    print ('Hello, %s' % name)

Hello = type ('Hello', (object,), dict (hello = fn))    # 创建Hello class




# 元类(metaclass):允许创建类或者修改类
# 先定义metaclass, 然后创建类，最后创建实例
# 给自定义的Mylist加一个add方法

class ListMetaclass (type):     # metaclass是创建类,必须要从type类型派生
    def __new__ (cls, name, bases, attrs):      # 参数: 准备创建的类的对象,类名，类继承的集合，类方法集合
        attrs['add'] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)
class Mylist (object):
    __metaclass__ = ListMetaclass       # 指示使用ListMetaclass来定制类
