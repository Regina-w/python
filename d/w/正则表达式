正则表达式

\d 		匹配一个数字
\w 		匹配一个字母或者数字
\s		可以匹配一个空格(包括tab等空白符)
 . 		可以匹配任何字符
 * 		表示任意个字符
 + 		表示至少一个字符
 ? 		表示一个或者零个字符
 {n} 	表示n个字符
 {n, m} 	表示n-m个字符
 
 
 []		表示范围
 #		[0-9a-zA-Z\_] 匹配至少一个数字，字母，下划线
 A|B	匹配A或者B
 ^		表示行开头
 ^\d	表示必须要以数字开头
 $		表示行结束
 \d$	必须要以数字结束
 
 re 模块
 import re
 'ABC\\-001' == ABC\-001 	# 转义字符
 r'ABC\\-001' == ABC\\-001	# 前缀r消除转义
 re.macth (r'正则表达式', 带匹配字符)
 #		匹配成功返回Match对象，否则为空
 
 
 分组 Group: 提取字串 ()
 # group(0) 原始串
 m = re.match (r'^(\d{3})-(\d{3-8})$', '0371-123456')
 m.group(0)
 m.group(1)
 m.group(2)
 m.groups()
 
 
 # hint 贪心匹配
 re.match (r'^(\d+)(0*)$', '102300').groups()	# ('102300', '')
 # \d+采用贪心匹配，把后面的0匹配完了， (0*)只能匹配空
 re.match (r'^(\d+?)(0*)$', '102300').group()	# ('1023', '00')
 
 
 
#邮箱验证
import re

b = input ()
a = re.match(r'^([a-zA-Z0-9_-]+).([a-zA-Z0-9_-]+)*@([a-zA-Z0-9-_]+).([a-zA-Z0-9]+)$', b)
if a:
	print ('Yep')
	print (a.groups())
else:
	print ('Fail')
	
