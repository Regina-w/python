# 高阶函数: 函数的参数能接收另外一个函数作为参数
def Add (x, y, f):
	return f(x) + f(y)

	
x = input()
x = int(x)
y = input()
y = int(y)
f = abs
print (Add (x, y, f))


# map(参数，序列), 把序列按照传入函数生成新的序列
def f(x):
	x += 1
	return x * x

l = range(10)
m = map (f, l)
for x in m:
	print (x)



# reduce 把函数作用在一个序列上, 函数必须接收两个参数,
# reduce 把结果和序列中下一个元素做累计计算
# reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
from functools import reduce
def Add (x, y):
	return x + y
	
L = range (10)
print (reduce (Add, L))



# 利用map与reduce 把 str 转化为 int
# char_num(s) 把s转化为int


from functools import reduce
def char_num (s):
	return  {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]

def alter (x, y):
	return x * 10 + y


a = input()
print (reduce (alter, map(char_num, a)))
